function propagateHierarchy(whatSpecies,whatFilter,doGEMMA)
% Process raw annotation data by propagating up the GO-term hierarchy
% That is, parent terms inherit annotations to their children
%-------------------------------------------------------------------------------

if nargin < 1
    whatSpecies = 'mouse';
end
if nargin < 2
    whatFilter = 'biological_process';
end
if nargin < 3
    doGEMMA = false;
end

% Replace following with path to the db of your GO release created in sqlite3
% (following the format of GODaily_2021-01-25.sql used in the Fulcher paper)
dbPath = '../GCEA_data/2022-01-13/GO_2022-01-13.db';
%-------------------------------------------------------------------------------
% Set filenames, and load unprocessed data (generated by ReadXXXAnnotationFile.m)
if doGEMMA && strcmp(whatSpecies,'mouse')
    fileNameLoad = 'GOAnnotationGEMMA.mat';
    fileNameSave = sprintf('GOAnnotationGEMMA-%s-Prop.mat',whatFilter);
else
    fileNameLoad = sprintf('GOAnnotationDirect-%s.mat',whatSpecies);
    fileNameSave = sprintf('GOAnnotationDirect-%s-%s-Prop.mat',whatSpecies,whatFilter);
    fileNameSave = fullfile('ProcessedData',fileNameSave);
end

load(fileNameLoad,'allGOCategories','geneEntrezAnnotations');
numGOCategoriesDirect = length(allGOCategories); % GO categories with direct annotations

GOTerms = GetGOTerms(whatFilter);
% Alternatively, if you've extracted the biological process terms manually
% from the term.txt file, you can simply load in your created
% GOTerms_BP.csv as a table

%-------------------------------------------------------------------------------
% mySQL query for hierarchy:
%-------------------------------------------------------------------------------
dbc = sqlite(dbPath, 'readonly');

% e.g., Get all biological_process-tagged GO categories
% selectText = sprintf('SELECT term1_id,term2_id FROM term2term WHERE relationship_type_id = 1');
% selectText1 = sprintf(['SELECT term2term.term1_id,term2term.term2_id FROM term2term INNER JOIN',...
%             ' term ON term2term.term1_id=term.id WHERE term2term.relationship_type_id=1',...
%             ' AND term.term_type LIKE "%s"'],whatFilter);
% selectText2 = sprintf(['SELECT term2term.term1_id,term2term.term2_id FROM term2term INNER JOIN',...
%             ' term ON term2term.term2_id=term.id WHERE term2term.relationship_type_id=1',...
%             ' AND term.term_type LIKE "%s"'],whatFilter);
% tableResults1 = mysql_dbquery(dbc,selectText1);
% tableResults2 = mysql_dbquery(dbc,selectText2);
selectText1 = ['SELECT term2term.id,term.acc FROM term INNER JOIN term2term ON ',...
                'term.id=term2term.term1_id WHERE term2term.relationship_type_id IN (1,25,27) ',...
                'AND term.acc LIKE "GO:%"'];
hierarchyRel1 = fetch(dbc, selectText1);
selectText2 = ['SELECT term2term.id,term.acc FROM term INNER JOIN term2term ON ',...
                'term.id=term2term.term2_id WHERE term2term.relationship_type_id IN (1,25,27) ',...
                'AND term.acc LIKE "GO:%"'];
hierarchyRel2 = fetch(dbc, selectText2);
%1==is_a, 25==part_of, 27==regulates
close(dbc)

id1 = vertcat(hierarchyRel1{:,1});
id2 = vertcat(hierarchyRel2{:,1});
[idBoth,ix1,ix2] = intersect(id1,id2);
GOtoNumber = @(x)str2num(x(4:end));
hierarchyRel = [vertcat(cellfun(GOtoNumber,hierarchyRel1(ix1,2))),...
                vertcat(cellfun(GOtoNumber,hierarchyRel2(ix2,2)))];
% So we have pairwise *is_a* interactions in hierarchyRel

%===============================================================================
% Now filter on terms that exist in our set of BP GO terms
yeahBP = ismember(hierarchyRel,GOTerms.GOID);
isBP = all(yeahBP,2);
fprintf(1,'%.2f%% of hierarchical relationships are related to our %s categories\n',...
                            mean(isBP)*100,whatFilter);
hierarchyRel = hierarchyRel(isBP,:);
numGOTerms = height(GOTerms);
fprintf(1,'So we have %u hierachical relationships between %u GO terms\n',...
                        length(hierarchyRel),numGOTerms);

%-------------------------------------------------------------------------------
% Convert to pairwise matrix
% (makes matching easier for hierarchy propagation)
%-------------------------------------------------------------------------------
hierarchyMatrix = zeros(numGOTerms,numGOTerms);
for i = 1:size(hierarchyRel,1)
    hierarchyMatrix(GOTerms.GOID==hierarchyRel(i,1),GOTerms.GOID==hierarchyRel(i,2)) = 1;
end

%-------------------------------------------------------------------------------
% Filter direct annotations -> just include BPs
%-------------------------------------------------------------------------------
isBP = ismember(allGOCategories,GOTerms.GOID);
allGOCategoriesFiltered = allGOCategories(isBP);
geneEntrezAnnotationsFiltered = geneEntrezAnnotations(isBP);
fprintf(1,'%u/%u GO categories with direct annotations are %s\n',...
                    sum(isBP),length(isBP),whatFilter);
numGOCategoriesDirect = sum(isBP);

%-------------------------------------------------------------------------------
% Prepare annotations for all (and start off categories with direct annotations):
%-------------------------------------------------------------------------------
geneEntrezAnnotationsFull = cell(numGOTerms,1);
ind = arrayfun(@(x)find(GOTerms.GOID==x),allGOCategoriesFiltered);
geneEntrezAnnotationsFull(ind) = geneEntrezAnnotationsFiltered;

%-------------------------------------------------------------------------------
% Propagate each directly annotated GO category up the full hierarchy:
%-------------------------------------------------------------------------------
beVocal = false;
for j = 1:numGOCategoriesDirect
    % Get parents of category (and their parents, etc.), using the full GO hierarchy:
    theGOTermIndex = find(GOTerms.GOID==allGOCategoriesFiltered(j));
    parentIDs = PropagateUp(theGOTermIndex,hierarchyMatrix,beVocal);
    numHierarchicalParents = length(parentIDs);
    % Filter to those with annotated terms:
    % idx = find(ismember(allGOCategories,GOTerms.GOID(parentIDs)));

    % Add annotations of child to all hierarchical parents
    for k = 1:numHierarchicalParents % loop over hierarchical parents
        geneEntrezAnnotationsFull{parentIDs(k)} = union(geneEntrezAnnotationsFull{parentIDs(k)},...
                                                            geneEntrezAnnotationsFiltered{j});
    end
    fprintf(1,'%u/%u: %u annotations for %s propagated up to %u parents\n',...
                j,numGOCategoriesDirect,...
                length(geneEntrezAnnotationsFiltered{j}),GOTerms.GOName{theGOTermIndex},...
                numHierarchicalParents);
end

%-------------------------------------------------------------------------------
% Stats:
%-------------------------------------------------------------------------------
sizeGOCategories = cellfun(@length,geneEntrezAnnotationsFull);
GOTerms.size = sizeGOCategories; % add to table
GOTerms.annotations = geneEntrezAnnotationsFull;
fprintf(1,'GO categories have between %u and %u annotations\n',min(sizeGOCategories),...
                                        max(sizeGOCategories));
fprintf(1,'%u(/%u) GO categories have 0 annotations\n',sum(sizeGOCategories==0),length(sizeGOCategories));


%-------------------------------------------------------------------------------
% Save
hierarchyMatrix = sparse(hierarchyMatrix);
save(fileNameSave,'GOTerms','hierarchyMatrix');
fprintf(1,'Saved to %s\n',fileNameSave);

end
